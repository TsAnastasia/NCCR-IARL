[
  {
    "title": "Основные сведения",
    "rules": [
      "`main` (`master`) – основная ветка, текущее состояние проекта в производстве.",
      "`develop` – главная ветка разработки, состояние кодовой базы проекта на текущий момент.",
      "Векти `main` и `develop` – постоянные, работу с ними НЕ СЛЕДУЕТ вести НАПРЯМУЮ.",
      "Главный (frontend-)разработчик – сотрудник, ответственный за frontend часть проекта."
    ]
  },
  {
    "title": "Разработка нового функционала",
    "rules": [
      "При разработке нового функционала необходимо ответвиться от ветки `develop`и вести работу во вновь созданной ветке.",
      "При именовании веток следует использовать короткие, описательные названия: `home-page`, `style-smth`, `fix-smth-error`, `refactor-smth` и т.д.",
      "В названии веток несколько слов следует разделять дефисом `-` и при необходимости имя разработчика можно указать после косой черты `/`.",
      "При работе нескольких человек над одним функционалом удобно создать общую ветку (`feature-a/main`) и отдельные ветви для каждого разработчика (`feature-a/denis`, `feature-a/nastya`). Все изменения будут сливаться в общую ветку, которая по завершению будет добавлена в главную."
    ]
  },
  {
    "title": "Коммиты",
    "rules": [
      "Сообщения коммитам следует писать на английском. При этом рекомендуется начать с глагола:  `create`, `make`, `add`, `split`, `style`, `fix`, `refactor`, `delete` и т.д. ",
      "Каждый коммит должен представлять собой одно законченное изменение. Не советуем разбивать одно логическое изменение на несколько коммитов и наоборот, не рекомендуется несколько изменений записывать в один коммит.",
      "Постоянно сохраняйте свои изменения. Небольшие атомарные коммиты легче понять и отменить, если что-то пойдет не так.",
      "Коммиты должны идти в логическом порядке. Если коммит X зависит от изменений коммита Y, то эти изменения необходимо сохранить перед записью X."
    ]
  },
  {
    "title": "Слияние изменений",
    "rules": [
      "После завершения разработки вашего кусочка кода необходимо влить изменения в ветку `develop` с помощью инструмента `pull request` (gitHub) / `merge request` (gitLab).",
      "Для начала необходимо проверить, что в вашей ветке есть последние изменения из `develop`, в противном случае могут быть конфликты.",
      "Подтянуть изменения из ветки `develop` в вашу можно двумя способами:",
      "1. Команда `rebase` (подтягивает изменения из указанной ветки в вашу и затем перезаписывает историю ваших коммитов). Рекомендуется использовать, когда ваш код содержит небольшие изменения и еще не был отправлен в удаленный репозиторий.",
      "2. Команда `merge` – залить изменения из указанной ветки в вашу.",
      "Все конфликты должны быть решены в вашей ветке под доработку.",
      "После решения всех конфликтов главный разработчик должен проверить ваш код. При необходимости он может потребовать доработать ваш код.",
      "После согласования вашего кода главным разработчиком он подтверждает ваши изменения, добавив их в главную ветку.",
      "Если нет необходимости хранить изменения, сделанные в вашей ветке, то после ее слияния следует ее удалить.",
      "Изменения из ветки `develop` сливаются в ветку `main` ГЛАВНЫМ РАЗРАБОТЧИКОМ после всех необходимых проверок."
    ]
  }
]
