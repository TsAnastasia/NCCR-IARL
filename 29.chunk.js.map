{"version":3,"file":"29.chunk.js","mappings":"wJA2BA,QAzBiB,WACf,OACE,6BACE,SAAC,IAAD,8CACA,siCAmBL,C","sources":["webpack://template/./src/pages/code/CodePage.tsx"],"sourcesContent":["import PageTitle from \"../../components/pageTitle/PageTitle\";\n\nconst CodePage = () => {\n  return (\n    <main>\n      <PageTitle>Рекомендации по написанию кода</PageTitle>\n      <div>\n        Для наименования переменных рекомендуется применять `camelCase`.\n        Исключения: данные, связанные с api (возможен `snake_case`, зависит от\n        бэкенд-разработчика) и константы (`UPPER_SNAKE_CASE`). Для написания\n        компонентов рекомендуется придерживаться функционального подхода, т.к.\n        классовый – считается устаревшим. Функции передаваемые в компоненты ниже\n        рекомендуется создавать с помощью хука useCallback. Все хуки принято\n        именовать, начиная с `use...`. Если размер кода компонента превышает 120\n        строк, то рекомендуется разбить его на более мелкие компоненты.\n        Компоненты-страницы и большие самостоятельные компоненты рекомендуется\n        подгружать с помощью lazy loading, при этом место их вставки необходимо\n        обернуть в компонент Suspense. Если код функциональной части компонента\n        (не JSX) получается большого объема, то возможно лучше создать отдельный\n        hook для нее. Информацию о загрузке, успехе и ошибке запроса к api\n        рекомендуется брать напрямую из соответствующего хука api, а не\n        записывать эти данные в глобальное хранилище приложения.\n      </div>\n    </main>\n  );\n};\n\nexport default CodePage;\n"],"names":[],"sourceRoot":""}